<<<<<<< HEAD
import { EngineRequest, Transport } from "../transport";
import type { Packet } from "engine.io-parser";
=======
import { Transport } from "../transport";
>>>>>>> 981e02d8b3161fb3284b6e7416793ef8f82f8915
export declare class WebSocket extends Transport {
    protected perMessageDeflate: any;
    private socket;
    /**
     * WebSocket transport
     *
<<<<<<< HEAD
     * @param {EngineRequest} req
     */
    constructor(req: EngineRequest);
    /**
     * Transport name
=======
     * @param {http.IncomingMessage}
     * @api public
     */
    constructor(req: any);
    /**
     * Transport name
     *
     * @api public
>>>>>>> 981e02d8b3161fb3284b6e7416793ef8f82f8915
     */
    get name(): string;
    /**
     * Advertise upgrade support.
<<<<<<< HEAD
     */
    get handlesUpgrades(): boolean;
    send(packets: Packet[]): void;
=======
     *
     * @api public
     */
    get handlesUpgrades(): boolean;
    /**
     * Advertise framing support.
     *
     * @api public
     */
    get supportsFraming(): boolean;
    /**
     * Writes a packet payload.
     *
     * @param {Array} packets
     * @api private
     */
    send(packets: any): void;
>>>>>>> 981e02d8b3161fb3284b6e7416793ef8f82f8915
    /**
     * Whether the encoding of the WebSocket frame can be skipped.
     * @param packet
     * @private
     */
    private _canSendPreEncodedFrame;
<<<<<<< HEAD
    private _doSend;
    private _doSendLast;
    private _onSent;
    private _onSentLast;
    doClose(fn?: () => void): void;
=======
    /**
     * Closes the transport.
     *
     * @api private
     */
    doClose(fn: any): void;
>>>>>>> 981e02d8b3161fb3284b6e7416793ef8f82f8915
}
